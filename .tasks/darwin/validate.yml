# https://taskfile.dev
version: '3'

tasks:
  # Checks that the current repo is not dirty
  repoNotDirty:
    vars:
      MSG_DIRTY: Your current branch is dirty and so we can not continue.
    cmds:
      - cmd:  if [[ ! -z $(git status --porcelain) ]]; then echo -e "\n{{.MSG_DIRTY}}\n"; exit 1; fi
    silent: true

  # Checks if the current state of the branch is the same as remote
  remoteDiff: 
    vars:
      MSG_REMOTE_DIFF: Local and Remote are different please fix and try again
    cmds:
      - cmd: git remote update && if [ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]; then echo -e "\n{{.MSG_REMOTE_DIFF}}\n"; exit 1; fi
    silent: true

  # Check that git is available from the cl
  confirmGit: 
    vars:
      MSG_NO_GIT: \nGIT is required for development on this app. \nPlease check the readme on what to do. \nAborting.\n
    cmds:
      - cmd: command -v git >/dev/null 2>&1 || { echo -e >&2 "{{ .MSG_NO_GIT }}"; exit 1; }
    silent: true

  # Check that curl is available from the cl
  confirmCurl:
    vars:
      MSG_NO_CURL: \nCurl is required for development on this app. \nPlease check the readme on what to do. \nAborting.\n
    cmds:
      - cmd: command -v curl >/dev/null 2>&1 || { echo -e >&2 "{{ .MSG_NO_GIT }}"; exit 1; }
    silent: true

  # Downloads the passed url to the passed path
  dlFile:
    vars:
      IN: '{{default "" .IN}}'
      OUT: '{{default "" .OUT}}'
      ERR: '{{default "Failed to dl file" .ERR}}'
    cmds:
      - cmd: if curl -so "{{.OUT}}" "{{.IN}}"; then echo "Download Complete ({{.OUT}})"; else echo -e "{{.ERR}}"; exit 1; fi
    silent: true

  